/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 9001.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 0.0], [6.5, 0.0], [6.6, 0.0], [6.7, 0.0], [6.8, 0.0], [6.9, 0.0], [7.0, 0.0], [7.1, 0.0], [7.2, 0.0], [7.3, 0.0], [7.4, 0.0], [7.5, 0.0], [7.6, 0.0], [7.7, 0.0], [7.8, 0.0], [7.9, 0.0], [8.0, 0.0], [8.1, 0.0], [8.2, 0.0], [8.3, 0.0], [8.4, 0.0], [8.5, 0.0], [8.6, 0.0], [8.7, 0.0], [8.8, 0.0], [8.9, 0.0], [9.0, 0.0], [9.1, 0.0], [9.2, 0.0], [9.3, 0.0], [9.4, 0.0], [9.5, 0.0], [9.6, 0.0], [9.7, 0.0], [9.8, 0.0], [9.9, 0.0], [10.0, 0.0], [10.1, 0.0], [10.2, 0.0], [10.3, 0.0], [10.4, 0.0], [10.5, 0.0], [10.6, 0.0], [10.7, 0.0], [10.8, 0.0], [10.9, 0.0], [11.0, 0.0], [11.1, 0.0], [11.2, 0.0], [11.3, 0.0], [11.4, 0.0], [11.5, 0.0], [11.6, 0.0], [11.7, 0.0], [11.8, 0.0], [11.9, 0.0], [12.0, 0.0], [12.1, 0.0], [12.2, 0.0], [12.3, 0.0], [12.4, 0.0], [12.5, 0.0], [12.6, 0.0], [12.7, 0.0], [12.8, 0.0], [12.9, 1.0], [13.0, 1.0], [13.1, 1.0], [13.2, 1.0], [13.3, 1.0], [13.4, 1.0], [13.5, 1.0], [13.6, 1.0], [13.7, 1.0], [13.8, 1.0], [13.9, 1.0], [14.0, 1.0], [14.1, 1.0], [14.2, 1.0], [14.3, 1.0], [14.4, 1.0], [14.5, 1.0], [14.6, 1.0], [14.7, 1.0], [14.8, 1.0], [14.9, 1.0], [15.0, 1.0], [15.1, 1.0], [15.2, 1.0], [15.3, 1.0], [15.4, 1.0], [15.5, 1.0], [15.6, 1.0], [15.7, 1.0], [15.8, 1.0], [15.9, 1.0], [16.0, 1.0], [16.1, 1.0], [16.2, 1.0], [16.3, 1.0], [16.4, 1.0], [16.5, 1.0], [16.6, 1.0], [16.7, 1.0], [16.8, 1.0], [16.9, 1.0], [17.0, 1.0], [17.1, 1.0], [17.2, 1.0], [17.3, 1.0], [17.4, 1.0], [17.5, 1.0], [17.6, 1.0], [17.7, 1.0], [17.8, 1.0], [17.9, 1.0], [18.0, 1.0], [18.1, 1.0], [18.2, 1.0], [18.3, 1.0], [18.4, 1.0], [18.5, 1.0], [18.6, 1.0], [18.7, 1.0], [18.8, 1.0], [18.9, 1.0], [19.0, 1.0], [19.1, 1.0], [19.2, 1.0], [19.3, 1.0], [19.4, 1.0], [19.5, 1.0], [19.6, 1.0], [19.7, 1.0], [19.8, 1.0], [19.9, 1.0], [20.0, 1.0], [20.1, 1.0], [20.2, 1.0], [20.3, 1.0], [20.4, 1.0], [20.5, 1.0], [20.6, 1.0], [20.7, 1.0], [20.8, 1.0], [20.9, 1.0], [21.0, 1.0], [21.1, 1.0], [21.2, 1.0], [21.3, 1.0], [21.4, 1.0], [21.5, 1.0], [21.6, 1.0], [21.7, 1.0], [21.8, 1.0], [21.9, 1.0], [22.0, 1.0], [22.1, 1.0], [22.2, 1.0], [22.3, 1.0], [22.4, 1.0], [22.5, 1.0], [22.6, 1.0], [22.7, 1.0], [22.8, 1.0], [22.9, 1.0], [23.0, 1.0], [23.1, 1.0], [23.2, 1.0], [23.3, 1.0], [23.4, 1.0], [23.5, 1.0], [23.6, 1.0], [23.7, 1.0], [23.8, 1.0], [23.9, 1.0], [24.0, 1.0], [24.1, 1.0], [24.2, 1.0], [24.3, 1.0], [24.4, 1.0], [24.5, 1.0], [24.6, 1.0], [24.7, 1.0], [24.8, 1.0], [24.9, 1.0], [25.0, 1.0], [25.1, 1.0], [25.2, 1.0], [25.3, 1.0], [25.4, 1.0], [25.5, 1.0], [25.6, 1.0], [25.7, 1.0], [25.8, 1.0], [25.9, 1.0], [26.0, 1.0], [26.1, 1.0], [26.2, 1.0], [26.3, 1.0], [26.4, 1.0], [26.5, 1.0], [26.6, 1.0], [26.7, 1.0], [26.8, 1.0], [26.9, 1.0], [27.0, 1.0], [27.1, 1.0], [27.2, 1.0], [27.3, 1.0], [27.4, 1.0], [27.5, 1.0], [27.6, 1.0], [27.7, 1.0], [27.8, 1.0], [27.9, 1.0], [28.0, 1.0], [28.1, 1.0], [28.2, 1.0], [28.3, 1.0], [28.4, 1.0], [28.5, 1.0], [28.6, 1.0], [28.7, 1.0], [28.8, 1.0], [28.9, 1.0], [29.0, 1.0], [29.1, 1.0], [29.2, 1.0], [29.3, 1.0], [29.4, 1.0], [29.5, 1.0], [29.6, 1.0], [29.7, 1.0], [29.8, 1.0], [29.9, 1.0], [30.0, 1.0], [30.1, 1.0], [30.2, 1.0], [30.3, 1.0], [30.4, 1.0], [30.5, 1.0], [30.6, 1.0], [30.7, 1.0], [30.8, 1.0], [30.9, 1.0], [31.0, 1.0], [31.1, 1.0], [31.2, 1.0], [31.3, 1.0], [31.4, 1.0], [31.5, 1.0], [31.6, 1.0], [31.7, 1.0], [31.8, 1.0], [31.9, 1.0], [32.0, 1.0], [32.1, 1.0], [32.2, 1.0], [32.3, 1.0], [32.4, 1.0], [32.5, 1.0], [32.6, 1.0], [32.7, 1.0], [32.8, 1.0], [32.9, 1.0], [33.0, 1.0], [33.1, 1.0], [33.2, 1.0], [33.3, 1.0], [33.4, 1.0], [33.5, 1.0], [33.6, 1.0], [33.7, 1.0], [33.8, 1.0], [33.9, 1.0], [34.0, 1.0], [34.1, 1.0], [34.2, 1.0], [34.3, 1.0], [34.4, 1.0], [34.5, 1.0], [34.6, 1.0], [34.7, 1.0], [34.8, 1.0], [34.9, 1.0], [35.0, 1.0], [35.1, 1.0], [35.2, 1.0], [35.3, 1.0], [35.4, 1.0], [35.5, 1.0], [35.6, 1.0], [35.7, 1.0], [35.8, 1.0], [35.9, 1.0], [36.0, 1.0], [36.1, 1.0], [36.2, 1.0], [36.3, 1.0], [36.4, 1.0], [36.5, 1.0], [36.6, 1.0], [36.7, 1.0], [36.8, 1.0], [36.9, 1.0], [37.0, 1.0], [37.1, 1.0], [37.2, 1.0], [37.3, 1.0], [37.4, 1.0], [37.5, 1.0], [37.6, 1.0], [37.7, 1.0], [37.8, 1.0], [37.9, 1.0], [38.0, 1.0], [38.1, 1.0], [38.2, 1.0], [38.3, 1.0], [38.4, 1.0], [38.5, 1.0], [38.6, 1.0], [38.7, 1.0], [38.8, 1.0], [38.9, 2.0], [39.0, 2.0], [39.1, 2.0], [39.2, 2.0], [39.3, 2.0], [39.4, 2.0], [39.5, 2.0], [39.6, 2.0], [39.7, 2.0], [39.8, 2.0], [39.9, 2.0], [40.0, 2.0], [40.1, 2.0], [40.2, 2.0], [40.3, 2.0], [40.4, 2.0], [40.5, 2.0], [40.6, 2.0], [40.7, 2.0], [40.8, 2.0], [40.9, 2.0], [41.0, 2.0], [41.1, 2.0], [41.2, 2.0], [41.3, 2.0], [41.4, 2.0], [41.5, 2.0], [41.6, 2.0], [41.7, 2.0], [41.8, 2.0], [41.9, 2.0], [42.0, 2.0], [42.1, 2.0], [42.2, 2.0], [42.3, 2.0], [42.4, 2.0], [42.5, 2.0], [42.6, 2.0], [42.7, 2.0], [42.8, 2.0], [42.9, 2.0], [43.0, 2.0], [43.1, 2.0], [43.2, 2.0], [43.3, 2.0], [43.4, 2.0], [43.5, 2.0], [43.6, 2.0], [43.7, 2.0], [43.8, 2.0], [43.9, 2.0], [44.0, 2.0], [44.1, 2.0], [44.2, 2.0], [44.3, 2.0], [44.4, 2.0], [44.5, 2.0], [44.6, 2.0], [44.7, 2.0], [44.8, 2.0], [44.9, 2.0], [45.0, 2.0], [45.1, 2.0], [45.2, 3.0], [45.3, 3.0], [45.4, 3.0], [45.5, 3.0], [45.6, 3.0], [45.7, 3.0], [45.8, 3.0], [45.9, 3.0], [46.0, 3.0], [46.1, 3.0], [46.2, 3.0], [46.3, 3.0], [46.4, 3.0], [46.5, 3.0], [46.6, 3.0], [46.7, 3.0], [46.8, 3.0], [46.9, 3.0], [47.0, 3.0], [47.1, 3.0], [47.2, 3.0], [47.3, 3.0], [47.4, 3.0], [47.5, 3.0], [47.6, 3.0], [47.7, 3.0], [47.8, 3.0], [47.9, 3.0], [48.0, 3.0], [48.1, 3.0], [48.2, 4.0], [48.3, 4.0], [48.4, 4.0], [48.5, 4.0], [48.6, 4.0], [48.7, 4.0], [48.8, 4.0], [48.9, 4.0], [49.0, 4.0], [49.1, 4.0], [49.2, 4.0], [49.3, 4.0], [49.4, 4.0], [49.5, 4.0], [49.6, 4.0], [49.7, 4.0], [49.8, 4.0], [49.9, 4.0], [50.0, 4.0], [50.1, 4.0], [50.2, 4.0], [50.3, 4.0], [50.4, 4.0], [50.5, 4.0], [50.6, 4.0], [50.7, 4.0], [50.8, 4.0], [50.9, 4.0], [51.0, 5.0], [51.1, 5.0], [51.2, 5.0], [51.3, 5.0], [51.4, 5.0], [51.5, 5.0], [51.6, 5.0], [51.7, 5.0], [51.8, 5.0], [51.9, 5.0], [52.0, 5.0], [52.1, 5.0], [52.2, 5.0], [52.3, 5.0], [52.4, 5.0], [52.5, 5.0], [52.6, 5.0], [52.7, 5.0], [52.8, 6.0], [52.9, 6.0], [53.0, 6.0], [53.1, 6.0], [53.2, 6.0], [53.3, 6.0], [53.4, 6.0], [53.5, 6.0], [53.6, 6.0], [53.7, 6.0], [53.8, 6.0], [53.9, 6.0], [54.0, 6.0], [54.1, 7.0], [54.2, 7.0], [54.3, 7.0], [54.4, 7.0], [54.5, 7.0], [54.6, 7.0], [54.7, 7.0], [54.8, 7.0], [54.9, 7.0], [55.0, 7.0], [55.1, 8.0], [55.2, 8.0], [55.3, 8.0], [55.4, 8.0], [55.5, 8.0], [55.6, 8.0], [55.7, 8.0], [55.8, 9.0], [55.9, 9.0], [56.0, 9.0], [56.1, 9.0], [56.2, 9.0], [56.3, 9.0], [56.4, 10.0], [56.5, 10.0], [56.6, 11.0], [56.7, 11.0], [56.8, 12.0], [56.9, 12.0], [57.0, 13.0], [57.1, 14.0], [57.2, 15.0], [57.3, 15.0], [57.4, 16.0], [57.5, 17.0], [57.6, 18.0], [57.7, 19.0], [57.8, 20.0], [57.9, 21.0], [58.0, 23.0], [58.1, 24.0], [58.2, 27.0], [58.3, 29.0], [58.4, 32.0], [58.5, 34.0], [58.6, 39.0], [58.7, 42.0], [58.8, 45.0], [58.9, 49.0], [59.0, 55.0], [59.1, 59.0], [59.2, 73.0], [59.3, 99.0], [59.4, 130.0], [59.5, 138.0], [59.6, 164.0], [59.7, 170.0], [59.8, 191.0], [59.9, 211.0], [60.0, 230.0], [60.1, 252.0], [60.2, 273.0], [60.3, 285.0], [60.4, 293.0], [60.5, 298.0], [60.6, 303.0], [60.7, 310.0], [60.8, 313.0], [60.9, 319.0], [61.0, 329.0], [61.1, 337.0], [61.2, 344.0], [61.3, 347.0], [61.4, 353.0], [61.5, 358.0], [61.6, 366.0], [61.7, 370.0], [61.8, 380.0], [61.9, 384.0], [62.0, 387.0], [62.1, 390.0], [62.2, 397.0], [62.3, 401.0], [62.4, 403.0], [62.5, 406.0], [62.6, 409.0], [62.7, 413.0], [62.8, 414.0], [62.9, 418.0], [63.0, 424.0], [63.1, 431.0], [63.2, 434.0], [63.3, 438.0], [63.4, 442.0], [63.5, 458.0], [63.6, 465.0], [63.7, 471.0], [63.8, 477.0], [63.9, 485.0], [64.0, 495.0], [64.1, 501.0], [64.2, 513.0], [64.3, 517.0], [64.4, 524.0], [64.5, 530.0], [64.6, 541.0], [64.7, 547.0], [64.8, 552.0], [64.9, 560.0], [65.0, 570.0], [65.1, 574.0], [65.2, 592.0], [65.3, 602.0], [65.4, 615.0], [65.5, 627.0], [65.6, 637.0], [65.7, 640.0], [65.8, 662.0], [65.9, 669.0], [66.0, 672.0], [66.1, 673.0], [66.2, 675.0], [66.3, 678.0], [66.4, 685.0], [66.5, 703.0], [66.6, 712.0], [66.7, 717.0], [66.8, 720.0], [66.9, 743.0], [67.0, 757.0], [67.1, 759.0], [67.2, 772.0], [67.3, 803.0], [67.4, 808.0], [67.5, 816.0], [67.6, 819.0], [67.7, 822.0], [67.8, 832.0], [67.9, 837.0], [68.0, 844.0], [68.1, 851.0], [68.2, 857.0], [68.3, 865.0], [68.4, 870.0], [68.5, 876.0], [68.6, 879.0], [68.7, 881.0], [68.8, 890.0], [68.9, 895.0], [69.0, 900.0], [69.1, 908.0], [69.2, 915.0], [69.3, 925.0], [69.4, 928.0], [69.5, 935.0], [69.6, 940.0], [69.7, 944.0], [69.8, 947.0], [69.9, 951.0], [70.0, 954.0], [70.1, 956.0], [70.2, 959.0], [70.3, 960.0], [70.4, 961.0], [70.5, 964.0], [70.6, 969.0], [70.7, 973.0], [70.8, 977.0], [70.9, 981.0], [71.0, 984.0], [71.1, 990.0], [71.2, 998.0], [71.3, 1009.0], [71.4, 1013.0], [71.5, 1018.0], [71.6, 1021.0], [71.7, 1023.0], [71.8, 1028.0], [71.9, 1032.0], [72.0, 1034.0], [72.1, 1036.0], [72.2, 1039.0], [72.3, 1042.0], [72.4, 1045.0], [72.5, 1049.0], [72.6, 1051.0], [72.7, 1053.0], [72.8, 1056.0], [72.9, 1061.0], [73.0, 1066.0], [73.1, 1070.0], [73.2, 1073.0], [73.3, 1080.0], [73.4, 1083.0], [73.5, 1090.0], [73.6, 1093.0], [73.7, 1098.0], [73.8, 1101.0], [73.9, 1103.0], [74.0, 1111.0], [74.1, 1113.0], [74.2, 1120.0], [74.3, 1127.0], [74.4, 1131.0], [74.5, 1133.0], [74.6, 1136.0], [74.7, 1140.0], [74.8, 1146.0], [74.9, 1149.0], [75.0, 1154.0], [75.1, 1160.0], [75.2, 1165.0], [75.3, 1169.0], [75.4, 1173.0], [75.5, 1177.0], [75.6, 1186.0], [75.7, 1188.0], [75.8, 1192.0], [75.9, 1196.0], [76.0, 1205.0], [76.1, 1212.0], [76.2, 1215.0], [76.3, 1222.0], [76.4, 1224.0], [76.5, 1225.0], [76.6, 1227.0], [76.7, 1232.0], [76.8, 1239.0], [76.9, 1242.0], [77.0, 1247.0], [77.1, 1252.0], [77.2, 1257.0], [77.3, 1263.0], [77.4, 1266.0], [77.5, 1268.0], [77.6, 1270.0], [77.7, 1273.0], [77.8, 1274.0], [77.9, 1275.0], [78.0, 1278.0], [78.1, 1281.0], [78.2, 1283.0], [78.3, 1286.0], [78.4, 1288.0], [78.5, 1290.0], [78.6, 1292.0], [78.7, 1294.0], [78.8, 1296.0], [78.9, 1298.0], [79.0, 1300.0], [79.1, 1301.0], [79.2, 1302.0], [79.3, 1303.0], [79.4, 1305.0], [79.5, 1306.0], [79.6, 1308.0], [79.7, 1310.0], [79.8, 1312.0], [79.9, 1314.0], [80.0, 1315.0], [80.1, 1317.0], [80.2, 1319.0], [80.3, 1321.0], [80.4, 1321.0], [80.5, 1322.0], [80.6, 1324.0], [80.7, 1325.0], [80.8, 1326.0], [80.9, 1329.0], [81.0, 1330.0], [81.1, 1334.0], [81.2, 1337.0], [81.3, 1339.0], [81.4, 1340.0], [81.5, 1342.0], [81.6, 1344.0], [81.7, 1347.0], [81.8, 1350.0], [81.9, 1352.0], [82.0, 1354.0], [82.1, 1359.0], [82.2, 1362.0], [82.3, 1366.0], [82.4, 1368.0], [82.5, 1369.0], [82.6, 1370.0], [82.7, 1373.0], [82.8, 1375.0], [82.9, 1376.0], [83.0, 1378.0], [83.1, 1380.0], [83.2, 1382.0], [83.3, 1386.0], [83.4, 1390.0], [83.5, 1392.0], [83.6, 1395.0], [83.7, 1396.0], [83.8, 1399.0], [83.9, 1402.0], [84.0, 1403.0], [84.1, 1404.0], [84.2, 1405.0], [84.3, 1407.0], [84.4, 1408.0], [84.5, 1413.0], [84.6, 1416.0], [84.7, 1418.0], [84.8, 1420.0], [84.9, 1422.0], [85.0, 1422.0], [85.1, 1423.0], [85.2, 1425.0], [85.3, 1427.0], [85.4, 1430.0], [85.5, 1431.0], [85.6, 1434.0], [85.7, 1438.0], [85.8, 1439.0], [85.9, 1442.0], [86.0, 1445.0], [86.1, 1449.0], [86.2, 1454.0], [86.3, 1457.0], [86.4, 1461.0], [86.5, 1464.0], [86.6, 1468.0], [86.7, 1470.0], [86.8, 1471.0], [86.9, 1475.0], [87.0, 1478.0], [87.1, 1481.0], [87.2, 1484.0], [87.3, 1487.0], [87.4, 1488.0], [87.5, 1490.0], [87.6, 1491.0], [87.7, 1495.0], [87.8, 1497.0], [87.9, 1499.0], [88.0, 1501.0], [88.1, 1505.0], [88.2, 1506.0], [88.3, 1508.0], [88.4, 1510.0], [88.5, 1514.0], [88.6, 1516.0], [88.7, 1519.0], [88.8, 1522.0], [88.9, 1524.0], [89.0, 1526.0], [89.1, 1527.0], [89.2, 1528.0], [89.3, 1530.0], [89.4, 1533.0], [89.5, 1536.0], [89.6, 1540.0], [89.7, 1542.0], [89.8, 1545.0], [89.9, 1550.0], [90.0, 1555.0], [90.1, 1558.0], [90.2, 1561.0], [90.3, 1564.0], [90.4, 1567.0], [90.5, 1568.0], [90.6, 1571.0], [90.7, 1573.0], [90.8, 1574.0], [90.9, 1575.0], [91.0, 1576.0], [91.1, 1578.0], [91.2, 1580.0], [91.3, 1582.0], [91.4, 1584.0], [91.5, 1587.0], [91.6, 1594.0], [91.7, 1598.0], [91.8, 1601.0], [91.9, 1606.0], [92.0, 1614.0], [92.1, 1620.0], [92.2, 1624.0], [92.3, 1626.0], [92.4, 1629.0], [92.5, 1631.0], [92.6, 1637.0], [92.7, 1641.0], [92.8, 1645.0], [92.9, 1654.0], [93.0, 1657.0], [93.1, 1663.0], [93.2, 1672.0], [93.3, 1683.0], [93.4, 1696.0], [93.5, 1703.0], [93.6, 1717.0], [93.7, 1723.0], [93.8, 1730.0], [93.9, 1741.0], [94.0, 1754.0], [94.1, 1765.0], [94.2, 1780.0], [94.3, 1784.0], [94.4, 1797.0], [94.5, 1811.0], [94.6, 1828.0], [94.7, 1833.0], [94.8, 1841.0], [94.9, 1850.0], [95.0, 1860.0], [95.1, 1869.0], [95.2, 1874.0], [95.3, 1885.0], [95.4, 1905.0], [95.5, 1918.0], [95.6, 1932.0], [95.7, 1951.0], [95.8, 1966.0], [95.9, 1972.0], [96.0, 1985.0], [96.1, 1993.0], [96.2, 2006.0], [96.3, 2015.0], [96.4, 2030.0], [96.5, 2039.0], [96.6, 2065.0], [96.7, 2067.0], [96.8, 2072.0], [96.9, 2083.0], [97.0, 2093.0], [97.1, 2102.0], [97.2, 2114.0], [97.3, 2119.0], [97.4, 2121.0], [97.5, 2124.0], [97.6, 2129.0], [97.7, 2137.0], [97.8, 2139.0], [97.9, 2142.0], [98.0, 2148.0], [98.1, 2155.0], [98.2, 2160.0], [98.3, 2163.0], [98.4, 2165.0], [98.5, 2169.0], [98.6, 2185.0], [98.7, 2198.0], [98.8, 2208.0], [98.9, 2222.0], [99.0, 2229.0], [99.1, 2242.0], [99.2, 2268.0], [99.3, 2381.0], [99.4, 2476.0], [99.5, 2612.0], [99.6, 2810.0], [99.7, 2829.0], [99.8, 2980.0], [99.9, 3579.0], [100.0, 9001.0]], "isOverall": false, "label": "TCP Echo Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 29652.0, "series": [{"data": [[0.0, 29652.0], [9000.0, 1.0], [600.0, 605.0], [700.0, 401.0], [800.0, 864.0], [900.0, 1108.0], [1000.0, 1260.0], [1100.0, 1104.0], [1200.0, 1508.0], [1300.0, 2428.0], [1400.0, 2058.0], [1500.0, 1915.0], [100.0, 287.0], [1600.0, 854.0], [1700.0, 479.0], [1800.0, 476.0], [1900.0, 395.0], [2000.0, 456.0], [2100.0, 833.0], [2300.0, 44.0], [2200.0, 254.0], [2400.0, 38.0], [2500.0, 39.0], [2600.0, 19.0], [2800.0, 93.0], [2700.0, 19.0], [2900.0, 33.0], [3000.0, 5.0], [3100.0, 13.0], [200.0, 320.0], [3400.0, 20.0], [3500.0, 10.0], [3600.0, 3.0], [4300.0, 1.0], [4100.0, 2.0], [4400.0, 6.0], [4500.0, 1.0], [300.0, 874.0], [4700.0, 21.0], [5000.0, 2.0], [5100.0, 1.0], [5200.0, 1.0], [5400.0, 1.0], [6200.0, 1.0], [400.0, 904.0], [7200.0, 1.0], [500.0, 590.0]], "isOverall": false, "label": "TCP Echo Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 9000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 191.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 29432.0, "series": [{"data": [[0.0, 29432.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 193.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 191.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 20184.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 933.3188599999993, "minX": 1.7525052E12, "maxY": 933.3188599999993, "series": [{"data": [[1.7525052E12, 933.3188599999993]], "isOverall": false, "label": "Load Test Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7525052E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.25, "minX": 1.0, "maxY": 3434.0, "series": [{"data": [[2.0, 0.9111111111111112], [3.0, 1.403669724770642], [4.0, 1.6410256410256407], [5.0, 1.2058823529411766], [6.0, 1.6266666666666667], [7.0, 1.0753424657534243], [8.0, 7.056074766355139], [9.0, 2.452054794520548], [10.0, 0.8214285714285714], [11.0, 29.149253731343276], [12.0, 18.968749999999993], [13.0, 2.0307692307692307], [14.0, 1.602040816326531], [15.0, 2.375], [16.0, 2.7865168539325844], [17.0, 33.32500000000001], [18.0, 8.999999999999993], [19.0, 3.2222222222222223], [20.0, 81.79999999999998], [21.0, 8.076923076923077], [22.0, 17.285714285714285], [23.0, 17.076923076923077], [24.0, 2.9444444444444446], [25.0, 14.843137254901961], [26.0, 20.29292929292929], [27.0, 10.365853658536585], [28.0, 56.841269841269806], [29.0, 18.416666666666664], [30.0, 75.24999999999999], [31.0, 16.392857142857142], [33.0, 35.30357142857143], [32.0, 2.7142857142857144], [34.0, 55.54054054054055], [35.0, 283.25925925925924], [36.0, 12.833333333333337], [37.0, 29.256410256410255], [39.0, 7.695652173913043], [38.0, 66.75862068965517], [40.0, 181.2142857142857], [41.0, 1341.7777777777778], [43.0, 163.47142857142856], [42.0, 18.794871794871803], [45.0, 29.281250000000004], [44.0, 166.41666666666669], [46.0, 7.285714285714286], [47.0, 201.15384615384616], [49.0, 122.51063829787235], [48.0, 1.8749999999999998], [51.0, 78.15384615384616], [50.0, 352.6315789473685], [52.0, 6.0], [53.0, 84.35802469135804], [55.0, 20.032258064516135], [54.0, 10.428571428571429], [57.0, 23.727272727272727], [56.0, 5.4], [59.0, 8.272727272727272], [58.0, 8.0], [60.0, 11.083333333333334], [61.0, 16.85714285714286], [62.0, 8.444444444444445], [63.0, 32.285714285714285], [64.0, 19.63380281690141], [67.0, 10.575757575757576], [66.0, 4.545454545454546], [65.0, 10.999999999999998], [68.0, 59.11538461538461], [70.0, 22.59259259259259], [69.0, 6.166666666666666], [71.0, 15.0], [75.0, 25.6], [74.0, 15.13888888888889], [73.0, 67.06666666666668], [72.0, 48.09090909090909], [79.0, 8.0], [77.0, 30.399999999999995], [76.0, 3.125], [78.0, 93.16666666666667], [81.0, 94.00000000000001], [82.0, 3.2], [83.0, 4.666666666666667], [80.0, 16.3448275862069], [85.0, 6.380952380952381], [87.0, 1.6875000000000007], [86.0, 36.60000000000001], [84.0, 9.545454545454547], [91.0, 49.16666666666667], [90.0, 43.599999999999994], [88.0, 22.54545454545454], [89.0, 8.228571428571428], [93.0, 21.407894736842106], [94.0, 25.727272727272723], [95.0, 34.66666666666667], [92.0, 13.31818181818182], [96.0, 16.68], [99.0, 121.0769230769231], [98.0, 41.40000000000002], [97.0, 23.984848484848477], [100.0, 27.297297297297295], [101.0, 151.66666666666666], [102.0, 74.0], [103.0, 38.041666666666664], [107.0, 15.77777777777777], [105.0, 5.0], [106.0, 0.5714285714285714], [104.0, 91.16666666666669], [108.0, 51.6875], [109.0, 10.25], [110.0, 4.6818181818181825], [111.0, 20.066666666666666], [114.0, 35.739130434782616], [115.0, 45.48148148148148], [113.0, 10.75824175824176], [112.0, 29.14285714285714], [119.0, 6.196969696969698], [118.0, 3.6999999999999997], [117.0, 2.625], [116.0, 21.923076923076923], [123.0, 1.1666666666666665], [122.0, 88.64999999999999], [121.0, 1.0], [120.0, 17.103448275862075], [127.0, 3.185185185185185], [126.0, 0.7547169811320753], [125.0, 0.8823529411764706], [124.0, 0.75], [135.0, 1.7560975609756098], [134.0, 9.909090909090907], [133.0, 1.8666666666666665], [132.0, 46.2], [131.0, 41.04761904761904], [130.0, 16.095238095238095], [129.0, 1.3571428571428572], [128.0, 0.7818181818181816], [139.0, 11.086538461538463], [140.0, 4.3611111111111125], [141.0, 7.148148148148149], [142.0, 3.083333333333333], [143.0, 6.800000000000001], [138.0, 0.9999999999999999], [137.0, 6.2727272727272725], [136.0, 1.3333333333333333], [144.0, 1.9333333333333333], [145.0, 2.258064516129032], [148.0, 12.3125], [151.0, 18.875], [150.0, 2.272727272727272], [149.0, 2.2545454545454544], [147.0, 32.5], [146.0, 5.375], [152.0, 1.5000000000000002], [153.0, 5.477611940298507], [156.0, 8.01923076923077], [157.0, 2.3255813953488373], [155.0, 2.3095238095238093], [154.0, 2.1730769230769234], [159.0, 5.574468085106384], [158.0, 2.0561797752808983], [162.0, 2.90909090909091], [163.0, 1.9999999999999996], [164.0, 48.83333333333333], [165.0, 1.8333333333333335], [166.0, 6.611111111111111], [167.0, 2.242424242424242], [161.0, 1.6785714285714286], [160.0, 1.3333333333333335], [169.0, 16.400000000000002], [170.0, 3.928571428571429], [171.0, 21.733333333333334], [173.0, 6.6071428571428585], [174.0, 3.495575221238937], [175.0, 4.405405405405406], [172.0, 1.297872340425532], [168.0, 2.08], [176.0, 6.387499999999998], [177.0, 2.714285714285714], [182.0, 43.0], [180.0, 9.75], [179.0, 40.25], [183.0, 0.28571428571428575], [181.0, 178.66666666666666], [178.0, 139.66666666666666], [191.0, 0.25], [190.0, 1.090909090909091], [188.0, 0.6363636363636365], [186.0, 0.4666666666666667], [185.0, 6.363636363636363], [184.0, 13.607142857142858], [189.0, 1.1176470588235297], [187.0, 22.866666666666667], [199.0, 6.194444444444445], [198.0, 1.5416666666666665], [197.0, 29.1], [196.0, 0.27272727272727276], [195.0, 1.1578947368421053], [193.0, 1.2], [192.0, 0.96], [194.0, 168.33333333333331], [207.0, 15.541666666666668], [206.0, 15.157894736842106], [205.0, 3.2], [204.0, 93.4], [203.0, 100.5], [201.0, 3.0], [200.0, 73.11111111111111], [202.0, 197.0], [215.0, 1.191489361702128], [213.0, 11.236363636363636], [212.0, 33.8125], [211.0, 4.28], [210.0, 2.163793103448276], [209.0, 5.170731707317074], [208.0, 7.0], [214.0, 8.82258064516129], [216.0, 7.780487804878048], [218.0, 37.0], [221.0, 56.6], [220.0, 36.125], [219.0, 65.3], [217.0, 1.2666666666666668], [223.0, 93.0], [231.0, 9.790697674418606], [230.0, 4.516129032258064], [229.0, 9.133333333333335], [228.0, 15.365079365079366], [227.0, 7.2], [226.0, 37.54545454545455], [225.0, 4.63157894736842], [224.0, 5.687500000000001], [233.0, 31.75], [232.0, 9.485294117647062], [239.0, 128.5], [236.0, 132.0], [235.0, 131.66666666666666], [247.0, 165.0], [246.0, 168.0], [245.0, 130.0], [241.0, 186.5], [248.0, 31.285714285714285], [249.0, 112.33333333333333], [250.0, 131.5], [251.0, 45.25], [252.0, 73.5], [253.0, 89.16666666666666], [254.0, 8.222222222222221], [255.0, 21.05263157894737], [270.0, 145.0], [259.0, 101.33333333333333], [260.0, 9.0], [261.0, 224.0], [258.0, 130.0], [257.0, 187.5], [269.0, 9.0], [271.0, 204.0], [267.0, 234.0], [266.0, 197.66666666666666], [265.0, 337.0], [264.0, 148.0], [274.0, 48.4], [273.0, 71.11111111111111], [275.0, 27.416666666666668], [284.0, 200.2857142857143], [285.0, 6.0], [287.0, 247.0], [276.0, 10.317460317460316], [278.0, 6.25], [279.0, 19.148936170212764], [280.0, 22.371428571428574], [282.0, 131.33333333333334], [281.0, 8.0], [277.0, 6.0], [272.0, 3.8], [300.0, 1348.5], [290.0, 3.0], [303.0, 256.1538461538461], [298.0, 235.0], [296.0, 244.5], [295.0, 216.5], [293.0, 247.0], [292.0, 247.5], [289.0, 244.2], [288.0, 243.33333333333334], [318.0, 236.75], [316.0, 1370.5], [315.0, 191.5], [314.0, 234.5], [311.0, 293.0], [306.0, 319.5], [305.0, 330.0], [322.0, 223.0], [335.0, 231.0], [334.0, 249.85714285714286], [331.0, 224.0], [330.0, 222.25], [326.0, 252.66666666666666], [325.0, 221.0], [321.0, 316.0], [320.0, 224.0], [350.0, 313.0], [351.0, 318.6666666666667], [348.0, 261.6], [339.0, 220.5], [338.0, 221.5], [337.0, 248.5], [336.0, 247.0], [347.0, 249.5], [346.0, 278.0], [345.0, 314.0], [344.0, 220.0], [343.0, 217.0], [342.0, 314.0], [341.0, 265.5], [366.0, 292.5], [367.0, 311.0], [365.0, 277.0], [364.0, 278.0], [363.0, 278.0], [361.0, 275.0], [360.0, 255.5], [359.0, 312.0], [354.0, 279.0], [353.0, 314.0], [358.0, 288.0], [357.0, 299.0], [356.0, 277.5], [382.0, 272.0], [383.0, 275.0], [381.0, 297.0], [371.0, 310.0], [370.0, 306.0], [369.0, 310.0], [368.0, 312.0], [379.0, 273.0], [378.0, 272.0], [377.0, 272.0], [376.0, 276.0], [375.0, 276.0], [374.0, 277.0], [373.0, 274.0], [372.0, 271.0], [397.0, 303.2857142857143], [399.0, 316.0], [396.0, 309.5], [387.0, 2513.0], [386.0, 272.0], [384.0, 284.6666666666667], [395.0, 314.4285714285714], [393.0, 302.0], [392.0, 302.0], [391.0, 318.0], [390.0, 296.3333333333333], [389.0, 304.5], [414.0, 317.0], [415.0, 328.0], [412.0, 330.0], [410.0, 323.5], [409.0, 321.3333333333333], [408.0, 322.0], [406.0, 331.0], [405.0, 329.0], [403.0, 324.5], [400.0, 325.3333333333333], [431.0, 1753.8], [430.0, 331.3333333333333], [427.0, 332.3333333333333], [426.0, 1420.5], [425.0, 334.0], [424.0, 334.0], [423.0, 776.8], [421.0, 330.1666666666667], [446.0, 1.0312500000000002], [447.0, 9.4], [445.0, 0.8421052631578947], [444.0, 7.749999999999999], [443.0, 13.30188679245283], [442.0, 1.6222222222222222], [441.0, 1.0588235294117647], [440.0, 0.9333333333333332], [439.0, 1.4999999999999998], [432.0, 336.0], [435.0, 1.0], [433.0, 1486.5], [438.0, 1.666666666666667], [437.0, 1.5], [436.0, 2.2], [448.0, 20.18181818181818], [452.0, 18.666666666666668], [451.0, 4.0], [461.0, 440.0], [460.0, 394.6666666666667], [453.0, 21.08333333333333], [450.0, 146.4], [449.0, 2.181818181818182], [455.0, 1.5833333333333333], [454.0, 0.5], [456.0, 0.7272727272727273], [457.0, 0.75], [458.0, 396.0], [477.0, 355.0], [476.0, 357.0], [473.0, 355.3333333333333], [471.0, 356.0], [469.0, 366.5], [467.0, 397.0], [466.0, 391.0], [494.0, 3.0], [491.0, 1.5483870967741935], [490.0, 23.5], [495.0, 522.0], [493.0, 444.0], [492.0, 440.0], [486.0, 353.0], [484.0, 353.0], [482.0, 353.0], [480.0, 353.0], [498.0, 290.2], [499.0, 2.0], [508.0, 0.7945205479452055], [509.0, 27.681818181818183], [511.0, 65.8695652173913], [510.0, 124.1875], [500.0, 40.888888888888886], [502.0, 99.33333333333333], [501.0, 41.30769230769231], [504.0, 1.1956521739130437], [503.0, 17.454545454545453], [497.0, 287.5], [505.0, 7.0], [506.0, 9.0], [507.0, 0.9642857142857144], [518.0, 150.42857142857144], [514.0, 0.8846153846153849], [512.0, 10.223684210526315], [516.0, 42.0], [536.0, 8.129251700680275], [538.0, 0.5925925925925928], [540.0, 11.82857142857143], [542.0, 1.2068965517241381], [528.0, 2.3157894736842106], [530.0, 23.91111111111111], [532.0, 18.49122807017544], [534.0, 9.505154639175256], [520.0, 27.85], [522.0, 1.25], [524.0, 3.6153846153846154], [526.0, 31.638297872340424], [544.0, 6.137500000000001], [546.0, 17.3265306122449], [558.0, 10.38125], [550.0, 61.3], [548.0, 1.166666666666667], [554.0, 158.2], [552.0, 10.321428571428573], [556.0, 9.69465648854962], [560.0, 9.567415730337078], [568.0, 22.241134751773053], [570.0, 27.83157894736842], [572.0, 10.598591549295774], [574.0, 1.187845303867403], [562.0, 8.848484848484848], [564.0, 0.7972972972972973], [566.0, 15.258064516129032], [578.0, 8.5234375], [604.0, 162.6764705882353], [588.0, 27.75438596491228], [586.0, 19.696428571428573], [584.0, 0.8801843317972353], [582.0, 12.602409638554215], [576.0, 5.930851063829786], [580.0, 0.8305084745762713], [600.0, 64.06060606060606], [590.0, 7.749999999999998], [592.0, 13.726277372262775], [594.0, 10.633928571428573], [596.0, 9.621621621621621], [598.0, 79.7625], [606.0, 6.518987341772152], [602.0, 32.3728813559322], [636.0, 67.16666666666667], [638.0, 97.27319587628865], [624.0, 38.32142857142858], [626.0, 6.999999999999997], [628.0, 46.30434782608697], [634.0, 32.01481481481483], [632.0, 14.929411764705883], [614.0, 18.344827586206897], [612.0, 5.460784313725488], [610.0, 99.26190476190476], [608.0, 125.08333333333334], [622.0, 22.778625954198475], [620.0, 101.07368421052628], [618.0, 80.59701492537312], [616.0, 11.929032258064517], [630.0, 19.92413793103449], [668.0, 16.904109589041095], [656.0, 13.402298850574716], [658.0, 34.714285714285715], [660.0, 107.85599999999998], [670.0, 53.44186046511628], [666.0, 21.04], [664.0, 50.93589743589744], [654.0, 135.45833333333331], [640.0, 73.25], [642.0, 5.957671957671958], [644.0, 45.8], [646.0, 0.6], [652.0, 27.826771653543325], [650.0, 4.923076923076925], [648.0, 20.833333333333336], [662.0, 83.38461538461537], [676.0, 13.19259259259259], [698.0, 44.16981132075472], [680.0, 46.108695652173914], [682.0, 111.15384615384615], [684.0, 0.43749999999999994], [686.0, 0.4444444444444444], [672.0, 11.441176470588236], [696.0, 254.91176470588235], [700.0, 83.0], [688.0, 0.3333333333333333], [690.0, 43.785714285714285], [692.0, 96.41666666666667], [694.0, 22.806451612903228], [702.0, 0.6428571428571428], [678.0, 24.558823529411768], [674.0, 6.327380952380955], [732.0, 26.490909090909092], [720.0, 0.48387096774193544], [722.0, 10.760869565217389], [724.0, 68.02739726027397], [734.0, 20.20779220779221], [730.0, 56.875], [728.0, 8.325842696629215], [718.0, 341.07189542483667], [704.0, 20.46551724137931], [706.0, 73.5], [708.0, 345.82758620689657], [710.0, 19.301587301587304], [716.0, 187.63131313131316], [714.0, 138.76277372262777], [712.0, 7.245614035087719], [726.0, 0.999999999999999], [760.0, 54.91111111111111], [764.0, 59.93749999999999], [752.0, 232.86956521739128], [754.0, 156.08695652173913], [766.0, 26.725806451612904], [762.0, 18.041666666666668], [736.0, 38.88235294117647], [738.0, 37.99999999999999], [740.0, 61.90909090909091], [742.0, 250.6818181818182], [750.0, 89.07692307692307], [748.0, 77.73333333333335], [746.0, 42.16], [744.0, 69.86486486486487], [758.0, 393.55555555555554], [756.0, 34.952380952380956], [796.0, 2.4642857142857144], [798.0, 5.269230769230769], [794.0, 31.68], [784.0, 33.675], [786.0, 2.3333333333333335], [788.0, 5.666666666666668], [792.0, 29.125], [768.0, 239.0], [770.0, 40.647058823529406], [772.0, 218.55696202531655], [774.0, 300.6250000000001], [782.0, 140.8], [780.0, 127.75438596491226], [778.0, 44.59322033898305], [776.0, 48.550724637681164], [790.0, 2.1176470588235294], [802.0, 97.82608695652173], [800.0, 21.421052631578945], [814.0, 28.814814814814813], [812.0, 34.18181818181819], [810.0, 46.104166666666664], [804.0, 12.855263157894738], [806.0, 57.310344827586206], [818.0, 380.5], [816.0, 187.83333333333331], [830.0, 587.1052631578947], [828.0, 701.0], [826.0, 702.0], [820.0, 58.06122448979592], [822.0, 703.0], [808.0, 3.25], [832.0, 551.0], [856.0, 720.0], [852.0, 693.3333333333334], [848.0, 713.0], [846.0, 858.0], [844.0, 770.0], [836.0, 675.0], [890.0, 757.0], [878.0, 718.75], [866.0, 739.5], [864.0, 685.0], [870.0, 718.0], [868.0, 718.5], [894.0, 806.5], [886.0, 758.0], [884.0, 744.3333333333334], [880.0, 824.3333333333334], [876.0, 793.5], [874.0, 754.3333333333333], [872.0, 718.0], [922.0, 758.0], [926.0, 789.0], [920.0, 790.0], [898.0, 757.0], [896.0, 757.5], [918.0, 767.7142857142858], [916.0, 820.75], [914.0, 822.0], [910.0, 747.1666666666667], [908.0, 759.0], [906.0, 758.0], [904.0, 724.0], [946.0, 2365.6666666666665], [958.0, 815.6], [954.0, 822.7499999999999], [948.0, 806.0], [940.0, 831.5], [938.0, 806.5], [934.0, 824.0], [930.0, 822.0], [986.0, 833.25], [974.0, 865.3000000000001], [990.0, 738.6666666666666], [972.0, 871.0], [968.0, 880.0], [976.0, 868.3333333333334], [988.0, 831.6666666666666], [964.0, 831.0], [962.0, 856.0], [960.0, 826.2], [982.0, 834.0], [980.0, 842.0], [996.0, 847.3333333333334], [1016.0, 783.3333333333334], [994.0, 558.92], [1002.0, 825.0], [1000.0, 1822.4], [992.0, 849.6666666666666], [1004.0, 633.0], [1010.0, 682.578947368421], [1014.0, 854.6666666666666], [1018.0, 867.0], [1032.0, 996.0], [1028.0, 549.0], [1048.0, 938.3333333333334], [1052.0, 924.5], [1072.0, 637.5], [1080.0, 961.0], [1076.0, 959.5], [1084.0, 960.0], [1056.0, 501.45000000000005], [1060.0, 506.16455696202524], [1064.0, 934.5], [1068.0, 958.0], [1044.0, 694.56], [1040.0, 944.0], [1116.0, 1069.222222222222], [1088.0, 602.9008264462814], [1104.0, 625.0], [1108.0, 982.5], [1112.0, 989.875], [1120.0, 1021.0], [1128.0, 1326.3333333333333], [1132.0, 1287.5], [1148.0, 894.4], [1144.0, 874.2], [1140.0, 957.0], [1136.0, 1080.3846153846155], [1100.0, 970.8260869565216], [1096.0, 942.3000000000001], [1092.0, 940.0], [1208.0, 1138.428571428571], [1212.0, 1068.2941176470588], [1184.0, 959.1111111111111], [1188.0, 986.25], [1192.0, 1003.2499999999999], [1200.0, 1080.5454545454545], [1164.0, 926.0], [1160.0, 988.1666666666666], [1152.0, 946.5], [1180.0, 939.6666666666666], [1176.0, 950.5], [1172.0, 944.0], [1168.0, 869.6666666666667], [1196.0, 1008.75], [1220.0, 1058.7692307692307], [1272.0, 1102.888888888889], [1216.0, 1162.5], [1228.0, 1071.0], [1244.0, 1273.0], [1240.0, 1125.9090909090908], [1236.0, 1044.6666666666667], [1232.0, 1122.0], [1248.0, 1103.5], [1252.0, 1005.3333333333334], [1256.0, 1101.0], [1260.0, 1081.8333333333335], [1276.0, 1102.0], [1268.0, 1063.5], [1264.0, 1097.0], [1308.0, 1137.0], [1332.0, 1225.0], [1292.0, 967.909090909091], [1296.0, 993.2727272727271], [1304.0, 1076.6666666666667], [1300.0, 1047.5], [1280.0, 1132.875], [1284.0, 1121.0], [1288.0, 1102.4444444444443], [1320.0, 1200.4705882352941], [1316.0, 1172.0], [1312.0, 1146.4], [1324.0, 1075.4285714285713], [1340.0, 1409.8333333333333], [1336.0, 1350.5], [1328.0, 1275.0], [1396.0, 1265.2], [1344.0, 1136.111111111111], [1376.0, 1296.0], [1392.0, 1049.5], [1356.0, 1711.5714285714284], [1352.0, 1917.3333333333333], [1400.0, 1698.25], [1404.0, 1548.75], [1384.0, 872.5], [1380.0, 1331.0], [1388.0, 1325.75], [1360.0, 1624.6666666666667], [1364.0, 1217.5294117647059], [1420.0, 1479.357142857143], [1412.0, 1443.0], [1436.0, 1460.0], [1456.0, 1584.3846153846152], [1416.0, 1690.3333333333333], [1424.0, 1492.3333333333333], [1428.0, 1461.4666666666665], [1468.0, 1277.7857142857142], [1440.0, 1498.4375], [1444.0, 1542.794117647059], [1448.0, 1414.833333333333], [1452.0, 1633.5454545454545], [1464.0, 1538.6], [1460.0, 1601.5555555555557], [1480.0, 1869.5], [1520.0, 673.0], [1500.0, 1357.9285714285713], [1496.0, 1445.0], [1492.0, 1786.6153846153845], [1488.0, 1784.75], [1472.0, 1567.03125], [1476.0, 1871.0], [1484.0, 1834.4285714285716], [1504.0, 1147.8], [1508.0, 1525.1666666666665], [1512.0, 1386.0], [1532.0, 1000.375], [1524.0, 855.0], [1536.0, 1220.5], [1596.0, 1072.0], [1552.0, 957.5], [1576.0, 1419.0], [1588.0, 1797.7999999999997], [1584.0, 1872.2], [1580.0, 1886.3333333333333], [1604.0, 1529.5], [1648.0, 1761.5], [1612.0, 929.0], [1608.0, 1186.3333333333333], [1600.0, 1000.25], [1616.0, 1019.6], [1620.0, 1388.0], [1624.0, 1242.3333333333333], [1628.0, 1128.0], [1632.0, 1373.3333333333335], [1636.0, 1385.5], [1640.0, 743.6666666666667], [1644.0, 1440.0], [1660.0, 1478.4444444444443], [1656.0, 1771.0], [1668.0, 1688.7142857142858], [1672.0, 1367.4666666666665], [1664.0, 1432.0], [1676.0, 1309.4117647058824], [1692.0, 949.0], [1688.0, 1155.7], [1684.0, 1124.25], [1680.0, 1431.0], [1712.0, 638.4285714285714], [1724.0, 1419.2], [1716.0, 954.428115015974], [1720.0, 1435.5], [1708.0, 757.5454545454546], [1704.0, 915.9333333333334], [1700.0, 1230.625], [1696.0, 1060.3333333333333], [1736.0, 1300.0], [1784.0, 1399.0833333333335], [1752.0, 1112.6000000000001], [1744.0, 1387.5714285714287], [1756.0, 1288.0], [1732.0, 1282.5625000000002], [1728.0, 1269.62962962963], [1776.0, 1508.0], [1760.0, 1498.0], [1768.0, 1406.4], [1772.0, 1464.0000000000002], [1788.0, 1404.0], [1780.0, 1506.75], [1804.0, 1627.44], [1844.0, 1205.7857142857144], [1792.0, 1258.7241379310344], [1820.0, 1935.2], [1816.0, 1406.2857142857142], [1808.0, 1438.6666666666667], [1800.0, 1501.0], [1796.0, 1417.0], [1840.0, 1500.2142857142858], [1824.0, 1880.0], [1828.0, 2039.6666666666667], [1832.0, 1448.5], [1836.0, 1377.1], [1852.0, 1325.0], [1848.0, 1447.8], [1856.0, 1406.4166666666667], [1912.0, 1512.153846153846], [1872.0, 1068.7083333333335], [1876.0, 1595.6], [1880.0, 1197.0588235294117], [1860.0, 1402.5555555555557], [1864.0, 1494.2857142857144], [1868.0, 1491.1351351351348], [1884.0, 1164.5555555555557], [1916.0, 1328.3888888888882], [1888.0, 1328.6363636363635], [1892.0, 1452.25], [1896.0, 1789.6], [1900.0, 1742.5], [1908.0, 1598.2500000000002], [1928.0, 1640.6999999999998], [1980.0, 1516.3591160220994], [1948.0, 1447.0000000000002], [1944.0, 1585.6923076923074], [1940.0, 1596.7142857142858], [1936.0, 1518.0], [1968.0, 1344.969696969697], [1932.0, 1594.8823529411766], [1924.0, 1591.5400000000002], [1920.0, 1557.7142857142858], [1960.0, 1297.0151515151513], [1964.0, 1338.68669527897], [1952.0, 1391.75], [1956.0, 1421.6666666666665], [1976.0, 1052.7777777777776], [1972.0, 1850.7931034482756], [1988.0, 1519.9004629629635], [1984.0, 1375.2857142857142], [1992.0, 1186.214285714286], [1996.0, 1491.7899543378999], [2000.0, 2294.5964912280697], [2004.0, 1932.8474576271176], [2008.0, 1267.836734693877], [1029.0, 609.125], [1025.0, 918.0], [1053.0, 561.0], [1049.0, 884.375], [1045.0, 394.0], [1033.0, 995.0], [1073.0, 959.0], [1037.0, 994.0], [1077.0, 960.0], [1057.0, 968.5], [1085.0, 962.0], [1061.0, 690.1111111111111], [1069.0, 958.0], [1041.0, 851.25], [1093.0, 946.0], [1145.0, 877.3333333333334], [1101.0, 961.4], [1097.0, 955.6666666666666], [1089.0, 960.5], [1117.0, 1039.0], [1113.0, 994.5], [1109.0, 989.0], [1105.0, 970.6666666666666], [1121.0, 1075.25], [1125.0, 1234.2857142857142], [1129.0, 1325.0], [1133.0, 1234.3333333333333], [1149.0, 894.0], [1141.0, 869.0], [1137.0, 1112.0], [1209.0, 1025.0], [1185.0, 965.0], [1189.0, 977.2857142857143], [1193.0, 1025.666666666667], [1213.0, 1133.3333333333333], [1205.0, 1132.5714285714287], [1201.0, 1035.0], [1153.0, 934.0], [1157.0, 927.3333333333334], [1165.0, 864.5], [1181.0, 941.0], [1177.0, 945.1818181818182], [1173.0, 907.0], [1169.0, 867.0], [1197.0, 1031.0], [1225.0, 1036.0000000000002], [1265.0, 1049.1666666666665], [1273.0, 1102.0], [1229.0, 1041.75], [1221.0, 1061.5], [1217.0, 1085.0434782608697], [1245.0, 1048.0], [1241.0, 1126.25], [1237.0, 1087.5], [1233.0, 1155.1999999999998], [1249.0, 999.8], [1253.0, 1027.1666666666665], [1261.0, 1102.5], [1277.0, 1098.0], [1269.0, 1043.25], [1289.0, 1124.0], [1293.0, 997.25], [1285.0, 1260.64], [1281.0, 1122.8333333333333], [1309.0, 1154.3333333333333], [1305.0, 1090.3200000000002], [1301.0, 1061.2307692307693], [1329.0, 1250.4999999999995], [1333.0, 1224.8125], [1337.0, 1352.3333333333333], [1341.0, 1289.142857142857], [1313.0, 1144.0], [1297.0, 973.0833333333333], [1325.0, 1177.1666666666667], [1353.0, 928.8333333333333], [1401.0, 1698.0], [1369.0, 1362.4], [1357.0, 1627.0], [1345.0, 1732.0], [1349.0, 1919.0], [1393.0, 1056.2], [1397.0, 1660.9285714285716], [1361.0, 1624.5], [1365.0, 1385.5555555555557], [1377.0, 1583.1875], [1381.0, 1244.3999999999999], [1385.0, 1305.0], [1389.0, 1408.3333333333333], [1405.0, 1543.6363636363633], [1413.0, 1754.837837837838], [1465.0, 1553.6153846153848], [1425.0, 1465.0], [1429.0, 1321.9545454545455], [1433.0, 1425.0000000000002], [1409.0, 1501.25], [1437.0, 1566.2631578947369], [1469.0, 1182.8799999999999], [1441.0, 1496.4], [1445.0, 1569.1666666666665], [1449.0, 1374.75], [1453.0, 1628.5384615384617], [1461.0, 1620.8888888888891], [1457.0, 1674.7500000000002], [1421.0, 1501.6666666666667], [1417.0, 1690.5], [1477.0, 1308.2758620689654], [1485.0, 1833.25], [1533.0, 1567.5], [1473.0, 1603.4], [1481.0, 1720.6], [1529.0, 1178.7499999999998], [1501.0, 1365.4444444444443], [1497.0, 1532.0], [1493.0, 1745.9375], [1489.0, 1784.6666666666665], [1505.0, 1108.75], [1513.0, 1055.0555555555557], [1509.0, 1525.2619047619046], [1573.0, 927.0], [1597.0, 995.0], [1577.0, 1645.75], [1581.0, 1776.6666666666665], [1585.0, 1363.0], [1593.0, 999.0], [1589.0, 1730.7142857142858], [1605.0, 1311.8333333333333], [1613.0, 1153.25], [1649.0, 1802.5], [1653.0, 1300.1739130434785], [1625.0, 1339.8461538461538], [1621.0, 1285.5], [1617.0, 937.0], [1601.0, 982.0], [1609.0, 1146.5], [1629.0, 1144.3333333333333], [1637.0, 951.3333333333333], [1641.0, 1371.25], [1645.0, 1364.5], [1661.0, 1438.2857142857142], [1657.0, 1504.0], [1669.0, 1810.3125], [1677.0, 1371.0], [1725.0, 1477.0], [1665.0, 1432.1666666666665], [1673.0, 1431.0], [1693.0, 964.0], [1689.0, 1022.5], [1685.0, 1114.1], [1681.0, 1081.8333333333333], [1701.0, 974.2222222222222], [1697.0, 909.5714285714286], [1721.0, 471.03999999999996], [1717.0, 1428.5714285714284], [1713.0, 1531.0], [1709.0, 780.3333333333334], [1705.0, 1138.6153846153845], [1737.0, 1369.4444444444443], [1733.0, 1288.75], [1741.0, 1388.6896551724142], [1777.0, 1507.25], [1781.0, 1497.8181818181818], [1753.0, 1258.4], [1749.0, 1426.875], [1745.0, 1390.6666666666667], [1757.0, 1083.5185185185192], [1729.0, 1262.8], [1789.0, 1181.9473684210525], [1761.0, 1510.705882352941], [1769.0, 1454.142857142857], [1773.0, 1508.4615384615383], [1841.0, 1350.0000000000002], [1849.0, 1436.7250000000004], [1793.0, 1313.25], [1801.0, 1709.5], [1805.0, 3213.714285714286], [1853.0, 1359.9565217391305], [1845.0, 1371.25], [1825.0, 1831.0], [1829.0, 2241.703703703704], [1833.0, 1575.75], [1837.0, 1376.0], [1809.0, 1356.6666666666667], [1813.0, 1368.8], [1817.0, 1416.0], [1821.0, 1575.5], [1857.0, 1364.0], [1861.0, 1454.5], [1885.0, 1184.851851851852], [1881.0, 1157.8], [1877.0, 1520.1733333333336], [1873.0, 1540.6], [1865.0, 1357.1333333333334], [1869.0, 1267.5000000000002], [1889.0, 1370.1166666666666], [1893.0, 1300.0], [1897.0, 1540.5555555555554], [1901.0, 1599.25], [1913.0, 1435.2], [1909.0, 1549.4761904761906], [1917.0, 1285.5], [1925.0, 1444.5599999999997], [1977.0, 1333.592592592593], [1941.0, 1550.0], [1937.0, 1519.0], [1921.0, 1606.357142857143], [1929.0, 1642.6764705882354], [1949.0, 1375.9333333333334], [1961.0, 1341.0208333333333], [1957.0, 1331.1851851851852], [1953.0, 1376.0], [1965.0, 1349.909090909091], [1969.0, 1378.1363636363637], [1933.0, 1565.7400000000002], [1981.0, 549.9714285714285], [1973.0, 1835.888888888889], [1989.0, 1422.1406249999986], [1985.0, 1401.25], [1993.0, 1860.2410714285713], [1997.0, 1042.6000000000001], [2001.0, 1985.4776119402982], [2005.0, 1479.6010362694294], [2009.0, 1210.659722222222], [519.0, 88.16666666666667], [515.0, 30.300000000000004], [517.0, 33.95348837209303], [513.0, 94.66666666666667], [537.0, 3.5172413793103448], [539.0, 31.375], [541.0, 52.272727272727266], [543.0, 1.1500000000000001], [531.0, 35.76068376068376], [529.0, 20.681818181818183], [533.0, 49.83783783783784], [535.0, 26.297297297297295], [521.0, 10.827586206896552], [523.0, 58.06896551724138], [527.0, 44.59420289855072], [525.0, 32.21212121212121], [545.0, 33.719298245614034], [551.0, 1.4074074074074079], [559.0, 8.748603351955305], [557.0, 15.965346534653463], [549.0, 92.85074626865672], [547.0, 50.17391304347826], [555.0, 11.152542372881356], [553.0, 43.10714285714286], [569.0, 10.422680412371134], [571.0, 14.748792270531403], [573.0, 20.262857142857143], [575.0, 49.96019900497513], [561.0, 15.219298245614034], [563.0, 1.1167883211678833], [565.0, 0.9999999999999999], [567.0, 41.986301369863014], [591.0, 86.89617486338797], [587.0, 11.89795918367347], [585.0, 6.072727272727272], [589.0, 5.3999999999999995], [581.0, 20.21052631578948], [583.0, 9.79646017699115], [577.0, 4.7443609022556394], [579.0, 15.405797101449275], [601.0, 13.753086419753085], [607.0, 103.07291666666667], [593.0, 9.298136645962735], [595.0, 6.781512605042018], [597.0, 21.761904761904763], [599.0, 1021.8780487804878], [605.0, 35.647727272727266], [603.0, 43.448275862068975], [635.0, 57.26595744680851], [633.0, 221.51578947368424], [639.0, 271.3226837060704], [627.0, 38.215189873417714], [625.0, 20.235294117647054], [629.0, 5.685714285714286], [637.0, 117.19473684210526], [615.0, 1.4298245614035097], [613.0, 15.208333333333332], [611.0, 407.39024390243907], [609.0, 52.22689075630252], [623.0, 20.054794520547947], [621.0, 189.72602739726025], [619.0, 81.38578680203047], [617.0, 127.40588235294118], [631.0, 16.237499999999997], [669.0, 13.093023255813954], [671.0, 5.444444444444445], [657.0, 54.593220338983045], [659.0, 16.75423728813559], [661.0, 48.270270270270274], [667.0, 131.7058823529412], [665.0, 49.25233644859814], [655.0, 60.586956521739125], [641.0, 63.55555555555556], [643.0, 9.237037037037036], [645.0, 64.9375], [647.0, 22.70175438596491], [653.0, 17.972027972027973], [651.0, 24.534090909090907], [649.0, 0.8166666666666669], [663.0, 8.94074074074074], [687.0, 155.83333333333331], [681.0, 10.37313432835821], [683.0, 80.80000000000001], [685.0, 70.78571428571428], [673.0, 15.805555555555557], [679.0, 55.315789473684205], [697.0, 78.28571428571429], [699.0, 65.83333333333334], [703.0, 53.273972602739725], [689.0, 46.52173913043478], [691.0, 434.26000000000005], [693.0, 1.0], [695.0, 29.041666666666668], [701.0, 27.97674418604651], [677.0, 89.82142857142858], [675.0, 10.258992805755398], [733.0, 25.402777777777782], [735.0, 29.444444444444432], [721.0, 32.247058823529414], [723.0, 91.42857142857143], [725.0, 14.6551724137931], [731.0, 23.93103448275862], [719.0, 35.75], [705.0, 56.61290322580644], [707.0, 78.67307692307692], [711.0, 15.897435897435896], [709.0, 0.5454545454545455], [717.0, 280.27777777777777], [715.0, 20.086419753086425], [713.0, 26.589041095890412], [729.0, 0.7555555555555555], [727.0, 8.066666666666666], [765.0, 0.7346938775510203], [767.0, 7.316831683168317], [753.0, 213.94444444444446], [755.0, 38.372093023255815], [763.0, 69.78260869565217], [761.0, 24.95918367346939], [751.0, 59.333333333333336], [737.0, 0.9999999999999999], [739.0, 15.085106382978724], [741.0, 73.53333333333333], [743.0, 78.23529411764706], [749.0, 84.85714285714286], [747.0, 264.5869565217391], [745.0, 50.349999999999994], [757.0, 183.25], [759.0, 284.625], [797.0, 55.84615384615385], [799.0, 23.054794520547944], [785.0, 26.57692307692308], [789.0, 1.611111111111111], [787.0, 65.96666666666667], [795.0, 19.78205128205128], [783.0, 1.2352941176470589], [769.0, 146.0], [771.0, 132.0909090909091], [773.0, 120.5], [775.0, 223.72289156626502], [781.0, 120.72000000000001], [779.0, 17.78723404255319], [777.0, 125.32258064516128], [793.0, 91.76666666666667], [791.0, 65.675], [803.0, 90.5625], [815.0, 313.5263157894737], [813.0, 27.719298245614034], [811.0, 3.0], [801.0, 86.74137931034484], [805.0, 11.099173553719009], [807.0, 257.64285714285717], [819.0, 440.5], [817.0, 57.1304347826087], [825.0, 604.8421052631579], [827.0, 638.4], [829.0, 590.5555555555555], [831.0, 585.6363636363636], [821.0, 51.8235294117647], [823.0, 686.0], [809.0, 299.5681818181818], [859.0, 706.6666666666666], [861.0, 699.0], [857.0, 760.0], [855.0, 680.3333333333334], [853.0, 680.0], [849.0, 681.5], [845.0, 858.0], [841.0, 708.1666666666666], [839.0, 662.0], [837.0, 719.0], [835.0, 672.3333333333333], [833.0, 684.4999999999999], [871.0, 718.0], [893.0, 764.8], [879.0, 708.0], [895.0, 757.3333333333334], [891.0, 857.0], [869.0, 718.6666666666666], [867.0, 719.0], [865.0, 738.125], [883.0, 758.0], [881.0, 717.0], [877.0, 812.5], [875.0, 772.0], [873.0, 738.0], [925.0, 800.0], [903.0, 864.125], [901.0, 782.5], [899.0, 758.0], [911.0, 749.75], [907.0, 726.0], [905.0, 744.4285714285714], [927.0, 788.5], [923.0, 820.5], [921.0, 757.6666666666666], [919.0, 789.5], [917.0, 789.5], [915.0, 805.4285714285714], [913.0, 790.0], [953.0, 806.0], [937.0, 780.75], [945.0, 892.0], [957.0, 833.0], [955.0, 879.0], [935.0, 838.3333333333334], [933.0, 1371.0], [931.0, 815.6666666666666], [929.0, 819.3333333333334], [967.0, 867.5], [975.0, 852.6666666666666], [961.0, 732.0], [965.0, 839.3333333333334], [963.0, 856.0], [971.0, 859.0], [969.0, 866.6666666666666], [991.0, 836.5714285714286], [977.0, 856.0], [985.0, 838.5], [983.0, 835.0], [979.0, 845.5], [993.0, 571.72], [995.0, 851.0], [1003.0, 710.0], [1001.0, 1287.3333333333333], [1005.0, 636.7142857142857], [1007.0, 851.0], [1009.0, 644.4545454545454], [1013.0, 854.0], [1011.0, 854.0], [1015.0, 854.0], [1017.0, 637.7674418604649], [1019.0, 863.0], [1030.0, 808.0], [1026.0, 593.2903225806452], [1054.0, 515.5625], [1050.0, 748.3333333333334], [1046.0, 861.0], [1034.0, 571.5], [1074.0, 959.0], [1082.0, 961.0], [1086.0, 535.8064516129032], [1058.0, 921.0], [1062.0, 557.4666666666667], [1066.0, 958.0], [1042.0, 937.0], [1142.0, 870.0], [1110.0, 979.0], [1114.0, 1089.5], [1118.0, 1121.8666666666668], [1150.0, 892.0], [1126.0, 1304.8], [1122.0, 1166.0], [1130.0, 1315.0], [1134.0, 1140.1000000000004], [1138.0, 1111.5], [1102.0, 967.0], [1098.0, 960.8823529411766], [1094.0, 940.0], [1090.0, 940.0], [1206.0, 1206.8333333333335], [1202.0, 1079.5], [1214.0, 1110.111111111111], [1186.0, 984.5], [1190.0, 968.4], [1210.0, 1029.2857142857144], [1166.0, 884.6666666666666], [1162.0, 939.2222222222223], [1158.0, 1004.75], [1154.0, 958.1666666666667], [1182.0, 943.8333333333334], [1178.0, 940.0], [1174.0, 908.25], [1170.0, 867.0], [1198.0, 1097.6], [1222.0, 801.75], [1218.0, 1030.0], [1226.0, 1052.3333333333333], [1246.0, 1115.0], [1242.0, 1122.6666666666667], [1238.0, 1056.3333333333333], [1278.0, 1098.3333333333333], [1250.0, 998.0], [1254.0, 1008.3333333333334], [1258.0, 1119.25], [1262.0, 1105.857142857143], [1274.0, 1112.3], [1270.0, 1102.6666666666667], [1266.0, 1023.0], [1290.0, 1114.6], [1342.0, 1621.0], [1298.0, 1066.5], [1282.0, 1142.7777777777778], [1286.0, 2128.0], [1306.0, 1113.9285714285713], [1322.0, 1155.047619047619], [1318.0, 1204.6666666666663], [1314.0, 1212.5], [1326.0, 1198.3636363636363], [1338.0, 1353.0], [1330.0, 1222.0], [1294.0, 1035.1], [1350.0, 995.0], [1366.0, 957.6842105263158], [1370.0, 1353.3333333333333], [1346.0, 1669.3], [1394.0, 941.6666666666667], [1358.0, 1626.1666666666665], [1354.0, 1865.5714285714284], [1398.0, 1482.0], [1402.0, 1619.5714285714284], [1406.0, 1485.8333333333333], [1382.0, 1279.125], [1378.0, 1331.0], [1386.0, 1257.1999999999998], [1390.0, 976.8571428571429], [1362.0, 1092.6249999999998], [1414.0, 694.5], [1462.0, 1608.4444444444443], [1438.0, 1546.0454545454545], [1410.0, 1520.6842105263158], [1434.0, 1498.851851851852], [1430.0, 1489.3333333333333], [1422.0, 1498.6666666666667], [1418.0, 1763.875], [1426.0, 1178.5714285714287], [1470.0, 1264.1666666666665], [1442.0, 1496.4], [1446.0, 1618.75], [1450.0, 1638.7068965517242], [1454.0, 1575.6666666666667], [1458.0, 1621.0], [1502.0, 1261.684210526316], [1494.0, 1772.3333333333333], [1490.0, 1787.923076923077], [1498.0, 1532.0], [1474.0, 1596.0], [1478.0, 1868.0], [1482.0, 1836.0], [1486.0, 1837.6666666666667], [1506.0, 1530.125], [1510.0, 1524.0], [1518.0, 54.0], [1514.0, 562.3235294117648], [1526.0, 273.0], [1590.0, 1207.764705882353], [1598.0, 1022.3000000000001], [1574.0, 1690.75], [1594.0, 1183.0], [1578.0, 1419.2], [1602.0, 1119.7142857142858], [1658.0, 1504.5], [1614.0, 1034.6666666666667], [1610.0, 1841.0], [1650.0, 1437.4], [1618.0, 939.0], [1622.0, 1183.0], [1626.0, 1101.0], [1630.0, 1161.0], [1634.0, 1333.6], [1638.0, 1096.3181818181818], [1642.0, 1228.0], [1662.0, 1435.857142857143], [1654.0, 1507.888888888889], [1670.0, 1761.142857142857], [1722.0, 1515.4285714285716], [1666.0, 1435.0], [1674.0, 1213.875], [1678.0, 1266.0], [1694.0, 1455.7499999999998], [1690.0, 948.2], [1686.0, 1254.5], [1682.0, 1431.0], [1710.0, 880.1666666666666], [1726.0, 1219.5333333333333], [1718.0, 1403.0], [1714.0, 674.0], [1706.0, 771.5], [1702.0, 1032.7777777777778], [1698.0, 1185.1666666666667], [1758.0, 1496.4444444444443], [1750.0, 1447.25], [1746.0, 1394.0], [1754.0, 1423.3333333333333], [1742.0, 1388.75], [1738.0, 1301.0], [1734.0, 1249.0], [1730.0, 1251.0], [1778.0, 1506.875], [1790.0, 980.2427007299273], [1766.0, 1511.5555555555557], [1762.0, 1555.6666666666667], [1770.0, 1459.0], [1774.0, 1508.75], [1786.0, 1378.0], [1782.0, 1437.8], [1794.0, 1522.3333333333333], [1822.0, 1667.8666666666666], [1818.0, 1533.8333333333335], [1814.0, 1396.142857142857], [1810.0, 1438.1499999999999], [1802.0, 3434.0], [1798.0, 1443.1666666666667], [1842.0, 1369.8421052631577], [1854.0, 1281.0000000000002], [1826.0, 1786.0], [1830.0, 2243.8214285714284], [1834.0, 1352.0], [1838.0, 1494.4444444444443], [1850.0, 1461.0], [1846.0, 1374.6153846153848], [1886.0, 1186.5], [1870.0, 1258.0833333333335], [1874.0, 1469.6666666666667], [1878.0, 1225.75], [1882.0, 1189.0], [1858.0, 1459.0], [1862.0, 1556.0], [1866.0, 1484.5], [1918.0, 1397.6249999999995], [1890.0, 1386.5714285714284], [1894.0, 1457.8620689655174], [1898.0, 1520.9374999999998], [1902.0, 1537.7], [1914.0, 1568.8], [1910.0, 1549.25], [1906.0, 1598.1666666666667], [1934.0, 1515.4545454545455], [1970.0, 1703.761904761905], [1950.0, 1327.1473684210523], [1946.0, 1575.875], [1942.0, 1542.1481481481483], [1938.0, 1543.4399999999998], [1930.0, 1628.4761904761904], [1926.0, 1600.0], [1922.0, 1580.6666666666667], [1962.0, 1383.5217391304345], [1966.0, 1365.5978835978833], [1982.0, 1455.9268292682934], [1954.0, 1368.6666666666667], [1958.0, 1292.6764705882356], [1978.0, 1403.0], [1974.0, 1315.048913043478], [1986.0, 1359.6999999999998], [2010.0, 1275.7931034482758], [1990.0, 2288.1674208144796], [1994.0, 1402.4399999999996], [1998.0, 1946.4900900900896], [2002.0, 1679.6652360515013], [2006.0, 1565.7857142857142], [1075.0, 958.0], [1055.0, 483.9], [1027.0, 616.625], [1051.0, 396.0], [1047.0, 940.2941176470589], [1035.0, 649.0], [1083.0, 959.0], [1079.0, 958.5], [1087.0, 963.25], [1059.0, 968.0], [1063.0, 826.5], [1067.0, 959.0], [1071.0, 958.0], [1043.0, 548.4761904761905], [1095.0, 941.0], [1103.0, 555.8846153846154], [1091.0, 944.2], [1119.0, 970.5], [1115.0, 1147.5], [1111.0, 984.0], [1107.0, 982.4545454545455], [1151.0, 860.1764705882354], [1123.0, 1167.8], [1127.0, 1326.2], [1135.0, 1033.6], [1147.0, 894.0], [1143.0, 849.7777777777778], [1139.0, 1004.0], [1211.0, 1048.4374999999998], [1215.0, 1166.0833333333333], [1187.0, 1024.0], [1191.0, 986.1999999999999], [1195.0, 1161.5], [1207.0, 1079.0], [1203.0, 1086.5], [1183.0, 953.0], [1159.0, 958.5], [1167.0, 867.3333333333334], [1179.0, 939.5], [1175.0, 859.3809523809524], [1171.0, 893.6666666666666], [1199.0, 1007.0], [1223.0, 1051.3333333333333], [1227.0, 1032.2], [1219.0, 1113.0], [1231.0, 1137.3333333333333], [1247.0, 1114.6666666666665], [1243.0, 1039.0], [1239.0, 1060.0], [1235.0, 1067.2499999999998], [1279.0, 1108.8125], [1251.0, 1170.8571428571427], [1255.0, 1122.8235294117646], [1259.0, 1051.9], [1275.0, 1103.75], [1271.0, 1082.5], [1267.0, 1022.3333333333334], [1287.0, 1120.3999999999999], [1295.0, 902.0], [1339.0, 1323.2857142857142], [1291.0, 1085.8], [1283.0, 1156.65], [1311.0, 1157.5], [1307.0, 1135.090909090909], [1303.0, 1069.0], [1331.0, 1199.7142857142858], [1335.0, 1314.142857142857], [1343.0, 1728.0], [1319.0, 1223.0], [1315.0, 1161.0], [1299.0, 1001.5], [1323.0, 921.28], [1327.0, 1272.095238095238], [1355.0, 1737.2], [1371.0, 473.87999999999994], [1367.0, 1253.6666666666667], [1359.0, 1625.0], [1375.0, 1619.0], [1347.0, 1729.0], [1351.0, 1919.0], [1395.0, 1331.25], [1399.0, 1700.3333333333335], [1363.0, 1212.25], [1407.0, 1471.4545454545453], [1379.0, 1331.0], [1383.0, 1072.5], [1387.0, 1307.8235294117646], [1391.0, 1120.375], [1403.0, 1607.0], [1439.0, 1519.8571428571431], [1427.0, 1372.4285714285716], [1431.0, 1490.6363636363637], [1435.0, 1459.3333333333333], [1411.0, 1746.6], [1471.0, 1571.25], [1443.0, 1466.125], [1447.0, 1707.0], [1451.0, 1650.5555555555557], [1455.0, 1576.3333333333333], [1467.0, 1556.0], [1463.0, 1573.25], [1459.0, 1596.8333333333335], [1419.0, 1730.142857142857], [1415.0, 1805.5882352941176], [1479.0, 1869.0], [1523.0, 1309.25], [1475.0, 1792.3870967741932], [1483.0, 1835.5], [1487.0, 1749.7142857142858], [1531.0, 370.0], [1535.0, 1483.0], [1503.0, 1364.0869565217392], [1499.0, 1529.4285714285713], [1495.0, 1620.4444444444443], [1491.0, 1786.8], [1511.0, 1477.8333333333333], [1507.0, 1518.4285714285713], [1579.0, 1264.0], [1583.0, 2258.0], [1591.0, 1096.7142857142856], [1599.0, 1278.4], [1595.0, 760.0], [1587.0, 1913.0], [1611.0, 1091.0], [1651.0, 1491.0], [1659.0, 1503.5], [1615.0, 1197.2], [1627.0, 1264.25], [1619.0, 1008.3333333333334], [1631.0, 1203.25], [1603.0, 1135.0], [1607.0, 892.0], [1635.0, 1406.0], [1643.0, 1090.5], [1639.0, 1035.75], [1647.0, 1450.3333333333333], [1663.0, 1433.0], [1655.0, 1521.0], [1667.0, 1471.0], [1695.0, 1377.4999999999998], [1671.0, 1754.0], [1675.0, 1346.857142857143], [1691.0, 948.5], [1687.0, 1340.375], [1683.0, 1081.0], [1711.0, 1290.0], [1727.0, 1387.6363636363635], [1699.0, 1383.8], [1723.0, 1406.0], [1719.0, 1442.0], [1715.0, 378.0], [1679.0, 1431.0], [1707.0, 744.0909090909091], [1703.0, 830.7142857142858], [1731.0, 1234.6666666666667], [1779.0, 1507.0], [1755.0, 1413.4], [1735.0, 1301.75], [1739.0, 1350.6], [1743.0, 1383.0], [1751.0, 1458.888888888889], [1747.0, 1408.5], [1759.0, 1496.6666666666667], [1783.0, 1340.7333333333333], [1787.0, 1448.7142857142858], [1791.0, 1185.1601123595517], [1767.0, 1434.0], [1763.0, 1450.0], [1771.0, 1448.0], [1775.0, 1508.0], [1807.0, 1287.0], [1803.0, 2781.7272727272725], [1799.0, 1443.9999999999998], [1795.0, 1410.111111111111], [1843.0, 1044.671875], [1851.0, 1357.727272727273], [1847.0, 1418.6521739130437], [1855.0, 1245.142857142857], [1827.0, 1951.0], [1831.0, 1812.5526315789475], [1835.0, 1335.5000000000002], [1839.0, 1325.0], [1811.0, 1378.5555555555557], [1815.0, 1407.2499999999998], [1819.0, 1667.6923076923074], [1823.0, 1749.8181818181818], [1867.0, 1502.0], [1915.0, 1327.2], [1859.0, 1326.8], [1887.0, 1243.272727272727], [1879.0, 1210.8979591836733], [1875.0, 1636.0000000000002], [1863.0, 1344.7142857142858], [1871.0, 1279.1249999999998], [1891.0, 1376.4545454545455], [1895.0, 1445.6044776119402], [1899.0, 1519.0], [1903.0, 1559.7142857142858], [1911.0, 1548.0], [1907.0, 1501.6666666666667], [1919.0, 1769.25], [1951.0, 1366.7599999999998], [1931.0, 1619.44], [1943.0, 1578.090909090909], [1939.0, 1580.3333333333333], [1947.0, 1742.7272727272725], [1923.0, 1588.6666666666667], [1927.0, 1639.6666666666667], [1963.0, 1511.046511627907], [1959.0, 1246.6], [1955.0, 1358.8620689655177], [1967.0, 1366.5714285714287], [1971.0, 1730.4074074074076], [1935.0, 1516.2187500000002], [1983.0, 1491.3296703296708], [1979.0, 1472.2061068702287], [1975.0, 1290.0], [1987.0, 1336.9101796407185], [1991.0, 2387.0000000000005], [1995.0, 1138.8734177215188], [1999.0, 2150.8411458333303], [2003.0, 1290.2768878718534], [2007.0, 1408.8981481481471], [1.0, 1.4137931034482762]], "isOverall": false, "label": "TCP Echo Request", "isController": false}, {"data": [[933.3191999999934, 514.4851799999968]], "isOverall": false, "label": "TCP Echo Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2010.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.7525052E12, "maxY": 33740.916666666664, "series": [{"data": [[1.7525052E12, 33740.916666666664]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7525052E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7525052E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 514.4851799999968, "minX": 1.7525052E12, "maxY": 514.4851799999968, "series": [{"data": [[1.7525052E12, 514.4851799999968]], "isOverall": false, "label": "TCP Echo Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7525052E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 17.147580000000048, "minX": 1.7525052E12, "maxY": 17.147580000000048, "series": [{"data": [[1.7525052E12, 17.147580000000048]], "isOverall": false, "label": "TCP Echo Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7525052E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 496.838420000001, "minX": 1.7525052E12, "maxY": 496.838420000001, "series": [{"data": [[1.7525052E12, 496.838420000001]], "isOverall": false, "label": "TCP Echo Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7525052E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7525052E12, "maxY": 4751.0, "series": [{"data": [[1.7525052E12, 4751.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7525052E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7525052E12, 6.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7525052E12, 1401.9800000000032]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7525052E12, 1.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7525052E12, 10.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7525052E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 73.0, "maxY": 4443.5, "series": [{"data": [[515.0, 19.0], [2122.0, 401.0], [2189.0, 2513.5], [2786.0, 1.0], [2942.0, 1.0], [3080.0, 3.0], [3258.0, 1.0], [1070.0, 831.0], [1045.0, 474.0], [1104.0, 1708.0], [1139.0, 1416.0], [4614.0, 1.0], [1199.0, 842.0], [73.0, 187.0], [1312.0, 820.5], [1291.0, 1907.0], [1317.0, 2114.0], [1293.0, 1593.0], [1396.0, 310.0], [5871.0, 1.0], [1485.0, 4171.0], [6871.0, 1.0], [447.0, 4443.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[515.0, 10.0], [2122.0, 1376.0], [2189.0, 718.0], [3080.0, 44.5], [3258.0, 432.0], [211.0, 1269.0], [1070.0, 535.0], [1045.0, 1121.0], [1104.0, 1047.0], [1139.0, 1560.0], [4614.0, 66.0], [1199.0, 389.0], [73.0, 14.0], [1312.0, 1546.0], [1291.0, 1386.5], [1317.0, 1407.0], [1293.0, 1133.0], [1370.0, 1322.0], [1396.0, 1444.0], [5871.0, 2.0], [1485.0, 2129.5], [6871.0, 664.0], [447.0, 1868.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6871.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 73.0, "maxY": 4443.5, "series": [{"data": [[515.0, 19.0], [2122.0, 364.5], [2189.0, 2513.5], [2786.0, 1.0], [2942.0, 1.0], [3080.0, 3.0], [3258.0, 1.0], [1070.0, 763.0], [1045.0, 474.0], [1104.0, 1708.0], [1139.0, 1416.0], [4614.0, 1.0], [1199.0, 842.0], [73.0, 187.0], [1312.0, 820.5], [1291.0, 1907.0], [1317.0, 2114.0], [1293.0, 1593.0], [1396.0, 310.0], [5871.0, 1.0], [1485.0, 4171.0], [6871.0, 1.0], [447.0, 4443.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[515.0, 0.0], [2122.0, 0.0], [2189.0, 0.0], [3080.0, 0.0], [3258.0, 0.0], [211.0, 0.0], [1070.0, 0.0], [1045.0, 0.0], [1104.0, 0.0], [1139.0, 0.0], [4614.0, 0.0], [1199.0, 0.0], [73.0, 0.0], [1312.0, 0.0], [1291.0, 0.0], [1317.0, 0.0], [1293.0, 0.0], [1370.0, 0.0], [1396.0, 0.0], [5871.0, 0.0], [1485.0, 0.0], [6871.0, 0.0], [447.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6871.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 833.3333333333334, "minX": 1.7525052E12, "maxY": 833.3333333333334, "series": [{"data": [[1.7525052E12, 833.3333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7525052E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 336.4, "minX": 1.7525052E12, "maxY": 496.93333333333334, "series": [{"data": [[1.7525052E12, 496.93333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7525052E12, 336.4]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7525052E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 336.4, "minX": 1.7525052E12, "maxY": 496.93333333333334, "series": [{"data": [[1.7525052E12, 336.4]], "isOverall": false, "label": "TCP Echo Request-failure", "isController": false}, {"data": [[1.7525052E12, 496.93333333333334]], "isOverall": false, "label": "TCP Echo Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7525052E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 336.4, "minX": 1.7525052E12, "maxY": 496.93333333333334, "series": [{"data": [[1.7525052E12, 496.93333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7525052E12, 336.4]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7525052E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

